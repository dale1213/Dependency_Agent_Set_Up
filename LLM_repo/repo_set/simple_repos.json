{
    "https://github.com/cudbg/Kitana-e2e": [
        "\n\n# Kitana e2e \n\n\n## Data Augmentation for Kitana\nThis repository contains the scalable e2e implementation for data augmentation for Kitana. The code is written in Python and contains sample data, sample execution code, and the data augmentation code.\n\nPlease follow the instructions below to run the code.\n\n### Instructions\n1. Clone the repository\n2. Make sure you are in the correct directory:\n```bash\ncd kitana-e2e\n```\n3. Run the following command to install the required libraries:\n```bash\n# If you are using python venv.\npython3 -m venv venv\nsource venv/bin/activate\npip install -r requirements.txt\n```\n\n```bash\n# If you are using conda, there is a environment.yml file in the repository.\nconda env create -f environment.yml\n```\n3. Run the following command to execute the code:\n```bash\npython sample_execution.py\n``` \n## Project Structure\n- **`api/`** - Contains the interfaces for external modules to interact with the core functionality of the search engine.\n- **`config/`** - Configuration settings for the project, including default paths, device settings, etc.\n- **`data_provider/`** - Core modules for data management, handling buyer and seller data.\n- **`market/`** - It loads the buyer and seller data.\n- **`models/`** - Defines all data models used throughout the project, including loaders and specific models for buyers and sellers.\n- **`preprocessing/`** - Data preprocessing utilities, ensuring data is clean and formatted correctly before entering the workflow.\n- **`resources/`** - Manages and optimizes computing resources, ensuring efficient use of available hardware.\n- **`search/`** - Core search engine functionality, implementing the algorithms that enhance buyer dataset with seller features.\n- **`sketches/`** - Contains the sketches for the data augmentation process. It is indexed by the `join_keys`.\n- **`statistics/`** - Statistical tools and functions. It contains a linear regression model to determine the augmentation effect.\n- **`utils/`** - General utilities used across the project for a variety of support tasks.\n- **`main.py`** - The entry point of the project, initializing and starting the search engine.\n",
        "ï»¿bidict==0.23.1\nblinker==1.8.2\nboto3==1.34.14\nbotocore==1.34.14\ncertifi==2023.11.17\ncharset-normalizer==3.3.2\nclick==8.1.7\ncolorama==0.4.6\ncontourpy==1.3.0\ncycler==0.12.1\nexceptiongroup==1.2.2\nfilelock==3.16.1\nFlask==3.0.0\nFlask-SocketIO==5.3.6\nfonttools==4.54.1\nfsspec==2023.12.2\nh11==0.14.0\nidna==3.6\nimportlib-metadata==7.0.1\nimportlib_resources==6.4.5\niniconfig==2.0.0\nitsdangerous==2.2.0\nJinja2==3.1.2\njmespath==1.0.1\njoblib==1.3.2\nkiwisolver==1.4.7\nMarkupSafe==3.0.2\nmatplotlib==3.9.2\nmpmath==1.3.0\nnetworkx==3.2.1\nnumpy==1.26.3\npackaging==24.1\npandas==2.1.4\npillow==11.0.0\npluggy==1.5.0\npsutil==5.9.7\npyparsing==3.2.0\npytest==8.3.3\npytest-mock==3.14.0\npython-dateutil==2.9.0.post0\npython-engineio==4.10.1\npython-socketio==5.11.4\npytz==2024.2\nPyYAML==6.0.2\nrequests==2.31.0\ns3transfer==0.10.3\nscikit-learn==1.3.2\nscipy==1.11.4\nsimple-websocket==1.1.0\nsix==1.16.0\nsympy==1.13.1\nthreadpoolctl==3.5.0\ntomli==2.0.2\ntorch==2.5.0\ntorchaudio==2.5.0\ntorchvision==0.20.0\ntqdm==4.66.5\ntyping_extensions==4.12.2\ntzdata==2024.2\nurllib3==1.26.18\nWerkzeug==3.0.1\nwsproto==1.2.0\nxgboost==2.0.3\nzipp==3.20.2",
        64
    ],
    "https://github.com/dale1213/2020-Coding-Challenge": [
        "# 2020-Columbia-Build-Lab-Coding-Exercise\n\nThank you for your interest in joining Columbia Build Lab!\n\nThis is a simple coding exercise designed to see your proficiency in web programming. \nAlthough it is written in Python and JS using flask framework, you don't need prior experience with them to complete the exercise - you are welcome and encouraged to use any online resources. \nThis exercise should take no longer than 1 hour, though you are welcome to take as much time as you need.\n\nThis exercise is designed to see how well you can read others' code, and extend it. As such, most of the code is already written - you only need to add a couple lines of code at the right place. \n\nIf you don't have flask on your computer, please install it with $pip install Flask. You can fork this repository and clone it to your desktop. You can run the code with $python3 server.py. Once you run it, you can type in http://127.0.0.1:5000/ on your browser to see the webpage rendered locally.\n\nYou'll see a short list of NHL teams, their scores, and buttons to increase their scores. Right now, clicking on a button doesn't increase the score immediately, but you need to refresh the page to see the change. The goal is to reflect this change immediately on the front-end. Once that's done, we would also like to sort the teams so that whenever there's a score change, the list would change so that the teams are listed in non-increasing order of scores from top to bottom (you don't need to sort them alphabetically when there is a tie). To do these, you would need to make changes in both server.py file and scoreboard.js file. When you're done, please send a pull request to this repository with your name and uni in the comment. Thanks and good luck!\n\n",
        "",
        0
    ]
}